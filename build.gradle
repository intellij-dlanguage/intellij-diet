import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.intellij' version '1.5.3'
    id 'org.jetbrains.kotlin.jvm' version '1.5.10' // This should match the Kotlin version in gradle.properties. (update to '1.5.31' when bump min Intellij)
    id 'org.jetbrains.grammarkit' version '2021.2.2'
}


sourceSets {
    main {
        java.srcDirs 'src/main/kotlin'
        resources.srcDirs 'src/main/resources'
    }
    test {
        java.srcDirs 'src/test/kotlin'
    }
}

group 'com.singingbush'
version = "${version}"

// --- code gen stuff
apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation"
}

def genRoot = file('build/gen')

apply plugin: 'kotlin'

sourceSets {
    main.java.srcDirs = files(genRoot) // we only have generated Java source
}

apply plugin: 'org.jetbrains.grammarkit'

generateParser {
    source = "grammar/diet.bnf"
    targetRoot = 'build/gen'
    pathToParser = '/com/singingbush/plugins/diet/parser/DietParser.java'
    pathToPsiRoot = '/com/singingbush/plugins/diet/psi'
    purgeOldFiles = true
}

generateLexer {
    source = "grammar/_DietLexer.flex"
    targetDir = "build/gen/com/singingbush/plugins/diet/parser/"
    targetClass = "_DietLexer"
    purgeOldFiles = true
}

project.generateLexer.dependsOn generateParser
project.compileJava.dependsOn generateLexer
project.compileKotlin.dependsOn generateLexer
// --- end the code gen stuff


allprojects {

    tasks.withType(Test) {
        useJUnit {
            include '**/**/*Test.*' // any Java or Kotlin class that ends with 'Test'
        }

        testLogging {
            beforeSuite { suite ->
                if (!suite.parent) { // will match the outermost suite
                    logger.lifecycle ' ----------- Building Tests -----------'
                } else if (suite.className != null) {
                    logger.lifecycle "${suite.className}:"
                }
            }

            afterTest { descriptor, result ->
                switch (result.resultType) {
                    case 'SUCCESS':
                    case 'PASSED':
                        logger.lifecycle("\t✔ {}", descriptor.name)
                        break
                    case TestResult.ResultType.SKIPPED.name():
                        logger.lifecycle("\t- {}", descriptor.name)
                        break
                    case TestResult.ResultType.FAILURE.name():
                        logger.lifecycle("\t✘ {}", descriptor.name)
                        break
                    default:
                        logger.lifecycle("\t? {} {}", descriptor.name, result.resultType)
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')
                }
            }
        }
    }

    // take the version number defined in gradle build and use that in plugin.xml
    task initConfig(type: Copy) {
        from('src/main/resources') {
            include '**/plugin.xml'
            filter(ReplaceTokens, tokens: [version: version])
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        pluginName = 'intellij-diet'
        version = ideaVersion
        // Pug (ex-Jade) = jade:173.1310
        // markdown:2017.1.20170119
        // Should work in: IntelliJ IDEA PhpStorm WebStorm PyCharm RubyMine AppCode CLion Gogland Rider
        // use the PUG (ex-Jade) plugin for providing basic syntax highlighting
        plugins = ['net.masterthought.dlanguage:1.27.2', 'com.jetbrains.plugins.jade:213.5744.223', 'CSS', 'JavaScriptLanguage']
        type = 'IU' // required as cannot run plugin in Community Edition because PUG (ex-Jade) plugin needs 'com.intellij.css:171.4249.39' and 'JavaScript:1.0' which are not in the repo
        //localPath '/Applications/IntelliJ IDEA.app/Contents' // if using this, make sure to remove 'version'
        updateSinceUntilBuild = false

        publishPlugin {
            token = provider {
                System.getenv('JETBRAINS_TOKEN')
            }
            channels = [publishChannels]
        }
    }

    task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //testCompile 'io.kotlintest:kotlintest:1.3.3'
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
        vcs = 'Git'
    }
    module {
        generatedSourceDirs += genRoot
    }
}
